import os
import sys
import json
import asyncio
import subprocess
from telethon import TelegramClient
from telethon.errors import PhoneCodeInvalidError, SessionPasswordNeededError, PhoneCodeExpiredError

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
accounts_dir = "accounts"

def clear_screen():
    """–û—á–∏—Å—Ç–∫–∞ —ç–∫—Ä–∞–Ω–∞ —Ç–µ—Ä–º–∏–Ω–∞–ª–∞"""
    os.system('cls' if os.name == 'nt' else 'clear')

def print_header():
    """–ü–µ—á–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∞ –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    print("\n" + "=" * 50)
    print("üîÆ  UGCLAWS USERBOT - –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ  üîÆ")
    print("=" * 50 + "\n")

def get_accounts():
    """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    if not os.path.exists(accounts_dir):
        os.makedirs(accounts_dir)
    accounts = []
    for item in os.listdir(accounts_dir):
        if os.path.isdir(os.path.join(accounts_dir, item)):
            accounts.append(item)
    return accounts

async def authenticate_account(phone, api_id, api_hash):
    """–ê–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –∞–∫–∫–∞—É–Ω—Ç–∞ –≤ Telegram"""
    account_name = phone.replace('+', '').strip()
    account_dir = os.path.join(accounts_dir, account_name)

    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞, –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
    if not os.path.exists(account_dir):
        os.makedirs(account_dir)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∞–∫–∫–∞—É–Ω—Ç–∞
    account_config = {
        "phone": phone,
        "api_id": api_id,
        "api_hash": api_hash
    }

    config_path = os.path.join(account_dir, "config.json")
    with open(config_path, 'w') as f:
        json.dump(account_config, f)

    session_path = os.path.join(account_dir, "session")

    # –°–æ–∑–¥–∞–µ–º –∫–ª–∏–µ–Ω—Ç Telethon
    client = TelegramClient(
        session_path, 
        int(api_id), 
        api_hash,
        device_model="Samsung Galaxy S21",
        system_version="Android 12",
        app_version="8.4.4",
        lang_code="ru",
        system_lang_code="ru"
    )

    await client.connect()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω –ª–∏ —É–∂–µ –∫–ª–∏–µ–Ω—Ç
    if await client.is_user_authorized():
        print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É–∂–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
        await client.disconnect()
        return True

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏–µ –∫–æ–¥–∞
    await client.send_code_request(phone)
    print(f"üì± –ö–æ–¥ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –Ω–∞ –Ω–æ–º–µ—Ä {phone}")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∫–æ–¥ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for attempt in range(1, 4):
        try:
            code = input(f"–í–≤–µ–¥–∏—Ç–µ –∫–æ–¥ –∏–∑ Telegram (–ø–æ–ø—ã—Ç–∫–∞ {attempt}/3): ")
            await client.sign_in(phone, code)
            print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
            await client.disconnect()
            return True
        except PhoneCodeInvalidError:
            print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –∫–æ–¥!")
            if attempt == 3:
                print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                await client.disconnect()
                return False
        except SessionPasswordNeededError:
            # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω–∞ –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–∞—è –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏—è
            print(f"‚ö†Ô∏è –¢—Ä–µ–±—É–µ—Ç—Å—è –ø–∞—Ä–æ–ª—å –¥–≤—É—Ö—Ñ–∞–∫—Ç–æ—Ä–Ω–æ–π –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏")
            for pw_attempt in range(1, 4):
                try:
                    password = input(f"–í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–æ–ª—å 2FA (–ø–æ–ø—ã—Ç–∫–∞ {pw_attempt}/3): ")
                    await client.sign_in(password=password)
                    print(f"‚úÖ –ê–∫–∫–∞—É–Ω—Ç {phone} —É—Å–ø–µ—à–Ω–æ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω —Å 2FA!")
                    await client.disconnect()
                    return True
                except:
                    print(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å!")
                    if pw_attempt == 3:
                        print(f"‚ùå –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è –∏—Å—á–µ—Ä–ø–∞–Ω—ã!")
                        await client.disconnect()
                        return False
        except PhoneCodeExpiredError:
            print(f"‚ùå –ö–æ–¥ –∏—Å—Ç—ë–∫, –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –Ω–æ–≤—ã–π...")
            await client.send_code_request(phone)

    await client.disconnect()
    return False

async def add_account():
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    clear_screen()
    print_header()
    print("üì± –ê–í–¢–û–†–ò–ó–ê–¶–ò–Ø –ù–û–í–û–ì–û –ê–ö–ö–ê–£–ù–¢–ê üì±\n")

    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∞–∫–∫–∞—É–Ω—Ç–∞
    phone = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ (—Å –∫–æ–¥–æ–º —Å—Ç—Ä–∞–Ω—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä +79123456789): ")
    api_id = input("–í–≤–µ–¥–∏—Ç–µ API ID: ")
    api_hash = input("–í–≤–µ–¥–∏—Ç–µ API Hash: ")

    # –ê–≤—Ç–æ—Ä–∏–∑—É–µ–º –∞–∫–∫–∞—É–Ω—Ç
    success = await authenticate_account(phone, api_id, api_hash)

    if success:
        print("\n‚úÖ –ê–∫–∫–∞—É–Ω—Ç —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω –∏ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω!")
    else:
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç!")

    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

async def start_single_bot():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞...")
    
    accounts = get_accounts()
    if not accounts:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
        
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç:")
    for i, account in enumerate(accounts, 1):
        print(f"{i}. {account}")
    
    account_choice = input(f"\n–í—ã–±–µ—Ä–∏—Ç–µ –∞–∫–∫–∞—É–Ω—Ç (1-{len(accounts)}): ")
    try:
        account_index = int(account_choice) - 1
        if 0 <= account_index < len(accounts):
            account_name = accounts[account_index]
            print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}...")
            # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –≤ —Ç–æ–º –∂–µ –ø—Ä–æ—Ü–µ—Å—Å–µ
            try:
                process = subprocess.run([sys.executable, "bot.py", f"--account={account_name}"], check=True)
                print(f"‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}!")
            except subprocess.CalledProcessError as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
            except FileNotFoundError:
                print("‚ùå –§–∞–π–ª bot.py –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        else:
            print("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä –∞–∫–∫–∞—É–Ω—Ç–∞!")
    except ValueError:
        print("‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ!")
    
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

async def start_all_bots():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤...")
    
    accounts = get_accounts()
    if not accounts:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤
    processes = []
    for account_name in accounts:
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º nohup –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ
            cmd = f"nohup python bot.py --account={account_name} > /dev/null 2>&1 &"
            process = subprocess.Popen(cmd, shell=True)
            processes.append((account_name, process))
            print(f"‚úÖ –ë–æ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –∑–∞–ø—É—â–µ–Ω –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –¥–ª—è {account_name}: {e}")
    
    print("\n‚úÖ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ —Ñ–æ–Ω–æ–≤–æ–º —Ä–µ–∂–∏–º–µ!")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

async def start_permanent_bots():
    """–ó–∞–ø—É—Å–∫ –±–æ—Ç–æ–≤ –¥–ª—è –≤—Å–µ—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ...")
    
    accounts = get_accounts()
    if not accounts:
        print("‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤!")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        return
    
    # –°–æ–∑–¥–∞—ë–º —Å–∫—Ä–∏–ø—Ç –∞–≤—Ç–æ–∑–∞–ø—É—Å–∫–∞
    startup_script = "#!/bin/bash\n\n"
    
    for account_name in accounts:
        startup_script += f"nohup python bot.py --account={account_name} > /dev/null 2>&1 &\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–∫—Ä–∏–ø—Ç
    with open("start_bots.sh", "w") as f:
        f.write(startup_script)
    
    # –î–µ–ª–∞–µ–º —Å–∫—Ä–∏–ø—Ç –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
    os.chmod("start_bots.sh", 0o755)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–æ–≤
    for account_name in accounts:
        print(f"\nüöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name}...")
        try:
            # –ò—Å–ø–æ–ª—å–∑—É–µ–º disown –¥–ª—è –æ—Ç–≤—è–∑–∫–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞ –æ—Ç —Ç–µ—Ä–º–∏–Ω–∞–ª–∞
            cmd = f"nohup python bot.py --account={account_name} > /dev/null 2>&1 & disown"
            subprocess.run(cmd, shell=True)
            print(f"‚úÖ –ë–æ—Ç –¥–ª—è –∞–∫–∫–∞—É–Ω—Ç–∞ {account_name} –∑–∞–ø—É—â–µ–Ω –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞ –¥–ª—è {account_name}: {e}")
    
    print("\n‚úÖ –í—Å–µ –±–æ—Ç—ã –∑–∞–ø—É—â–µ–Ω—ã –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ!")
    print("\n‚ö†Ô∏è –í–∞–∂–Ω–æ: –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–∫—Ä—ã—Ç—å —ç—Ç–æ –æ–∫–Ω–æ, –∏ –±–æ—Ç—ã –ø—Ä–æ–¥–æ–ª–∂–∞—Ç —Ä–∞–±–æ—Ç–∞—Ç—å")
    print("üìù –î–ª—è –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å–∫—Ä–∏–ø—Ç start_bots.sh")
    input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")

async def main_menu():
    """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –ø—Ä–æ–≥—Ä–∞–º–º—ã"""
    while True:
        clear_screen()
        print_header()

        # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –∞–∫–∫–∞—É–Ω—Ç–æ–≤
        accounts = get_accounts()

        # –í—ã–≤–æ–¥–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –∞–∫–∫–∞—É–Ω—Ç–∞—Ö
        if accounts:
            print(f"üì± –ê–ö–ö–ê–£–ù–¢–´: {len(accounts)}\n")
            for i, account in enumerate(accounts, 1):
                print(f"{i}. {account}")
        else:
            print("‚ö†Ô∏è –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤. –î–æ–±–∞–≤—å—Ç–µ –Ω–æ–≤—ã–π –∞–∫–∫–∞—É–Ω—Ç.")

        print("\nüîç –ú–ï–ù–Æ:\n")
        print("1. –ê–≤—Ç–æ—Ä–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∞–∫–∫–∞—É–Ω—Ç (API ID, API Hash, –Ω–æ–º–µ—Ä, –∫–æ–¥, 2FA)")
        print("2. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –¥–ª—è –æ–¥–Ω–æ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞")
        print("3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤")
        print("4. –ó–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–æ–≤ –¥–ª—è –í–°–ï–• –∞–∫–∫–∞—É–Ω—Ç–æ–≤ –≤ –ø–æ—Å—Ç–æ—è–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ")
        print("5. –û–°–¢–ê–ù–û–í–ò–¢–¨ –¢–û–õ–¨–ö–û –¢–ï–ö–£–©–ò–ô –ü–†–û–¶–ï–°–°")
        print("6. –í—ã—Ö–æ–¥")

        choice = input("\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ (1-6): ")

        if choice == "1":
            await add_account()
        elif choice == "2":
            if not accounts:
                print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                continue
            await start_single_bot()
        elif choice == "3":
            if not accounts:
                print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                continue
            await start_all_bots()
        elif choice == "4":
            if not accounts:
                print("\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–∫–∫–∞—É–Ω—Ç–æ–≤! –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –∞–∫–∫–∞—É–Ω—Ç.")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
                continue
            await start_permanent_bots()
        elif choice == "5":
            # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –¢–û–õ–¨–ö–û –¢–ï–ö–£–©–ò–ô –±–æ—Ç/–ø—Ä–æ—Ü–µ—Å—Å
            try:
                clear_screen()
                print("\n‚ö†Ô∏è –û–°–¢–ê–ù–û–í–ö–ê –¢–ï–ö–£–©–ï–ì–û –ü–†–û–¶–ï–°–°–ê ‚ö†Ô∏è")
                print("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ Python...")
                
                # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º –∏–∑ –ø—Ä–æ–≥—Ä–∞–º–º—ã —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º 0 (–Ω–æ—Ä–º–∞–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ)
                print("‚úÖ –¢–µ–∫—É—â–∏–π –ø—Ä–æ—Ü–µ—Å—Å –±—É–¥–µ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
                print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UGCLAWS USERBOT!")
                sys.exit(0)  # –ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Å—Ç–∞–Ω–æ–≤–∫–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞: {e}")
                input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é...")
        elif choice == "6":
            clear_screen()
            print("\nüëã –°–ø–∞—Å–∏–±–æ –∑–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ UGCLAWS USERBOT!")
            break
        else:
            print("\n‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1-6.")
            input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å...")

if __name__ == "__main__":
    try:
        asyncio.run(main_menu())
    except KeyboardInterrupt:
        clear_screen()
        print("\nüëã –ü—Ä–æ–≥—Ä–∞–º–º–∞ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º.")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        input("\n–ù–∞–∂–º–∏—Ç–µ Enter, —á—Ç–æ–±—ã –≤—ã–π—Ç–∏...")